import { motion, useInView } from 'framer-motion'
import { useRef } from 'react'
import { Clock } from 'lucide-react'

export default function Services({ language }) {
  const ref = useRef(null)
  const isInView = useInView(ref, { once: true })

  const content = {
    en: {
      title: "Temple Services",
      subtitle: "Experience divine services and participate in sacred rituals that nurture your spiritual growth",
      specialSevaTitle: "Special Seva & Puja",
      specialSevaSubtitle: "Book personalized spiritual services for special occasions and divine blessings",
      templeTimingsTitle: "Temple Timings",
      dailySchedule: "Daily Schedule",
      specialTimings: "Special Timings",
      morningDarshan: "Morning Darshan",
      afternoonBreak: "Afternoon Break",
      eveningDarshan: "Evening Darshan",
      festivalDays: "Festival Days",
      mangalAarti: "Mangal Aarti",
      sandhyaAarti: "Sandhya Aarti",
      extendedHours: "Extended Hours",
      contactInfo: "Contact for More Information",
      bookNow: "Book Now",
      price: "Price:",
      duration: "Duration:",
      advanceBooking: "Advance booking required",
      free: "Free",
      donationBased: "Donation Based",
      byAppointment: "By Appointment",
      weekends: "Weekends"
    },
    hi: {
      title: "рдордВрджрд┐рд░ рд╕реЗрд╡рд╛рдПрдВ",
      subtitle: "рджрд┐рд╡реНрдп рд╕реЗрд╡рд╛рдУрдВ рдХрд╛ рдЕрдиреБрднрд╡ рдХрд░реЗрдВ рдФрд░ рдкрд╡рд┐рддреНрд░ рдЕрдиреБрд╖реНрдард╛рдиреЛрдВ рдореЗрдВ рднрд╛рдЧ рд▓реЗрдВ рдЬреЛ рдЖрдкрдХреА рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рд╡реГрджреНрдзрд┐ рдХрд╛ рдкреЛрд╖рдг рдХрд░рддреЗ рд╣реИрдВ",
      specialSevaTitle: "рд╡рд┐рд╢реЗрд╖ рд╕реЗрд╡рд╛ рдФрд░ рдкреВрдЬрд╛",
      specialSevaSubtitle: "рд╡рд┐рд╢реЗрд╖ рдЕрд╡рд╕рд░реЛрдВ рдФрд░ рджрд┐рд╡реНрдп рдЖрд╢реАрд░реНрд╡рд╛рдж рдХреЗ рд▓рд┐рдП рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рд╕реЗрд╡рд╛рдПрдВ рдмреБрдХ рдХрд░реЗрдВ",
      templeTimingsTitle: "рдордВрджрд┐рд░ рдХрд╛ рд╕рдордп",
      dailySchedule: "рджреИрдирд┐рдХ рдХрд╛рд░реНрдпрдХреНрд░рдо",
      specialTimings: "рд╡рд┐рд╢реЗрд╖ рд╕рдордп",
      morningDarshan: "рдкреНрд░рд╛рддрдГ рджрд░реНрд╢рди",
      afternoonBreak: "рджреЛрдкрд╣рд░ рдХрд╛ рд╡рд┐рд░рд╛рдо",
      eveningDarshan: "рд╕рдВрдзреНрдпрд╛ рджрд░реНрд╢рди",
      festivalDays: "рддреНрдпреЛрд╣рд╛рд░ рдХреЗ рджрд┐рди",
      mangalAarti: "рдордВрдЧрд▓ рдЖрд░рддреА",
      sandhyaAarti: "рд╕рдВрдзреНрдпрд╛ рдЖрд░рддреА",
      extendedHours: "рд╡рд┐рд╕реНрддрд╛рд░рд┐рдд рдШрдВрдЯреЗ",
      contactInfo: "рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ",
      bookNow: "рдЕрднреА рдмреБрдХ рдХрд░реЗрдВ",
      price: "рдореВрд▓реНрдп:",
      duration: "рдЕрд╡рдзрд┐:",
      advanceBooking: "рдЕрдЧреНрд░рд┐рдо рдмреБрдХрд┐рдВрдЧ рдЖрд╡рд╢реНрдпрдХ",
      free: "рдирд┐рдГрд╢реБрд▓реНрдХ",
      donationBased: "рджрд╛рди рдЖрдзрд╛рд░рд┐рдд",
      byAppointment: "рдирд┐рдпреБрдХреНрддрд┐ рджреНрд╡рд╛рд░рд╛",
      weekends: "рд╕рдкреНрддрд╛рд╣рд╛рдВрдд"
    },
    or: {
      title: "рмормирнНрмжрм┐рм░ рм╕рнЗрммрм╛",
      subtitle: "рмжрм┐рммрнНрнЯ рм╕рнЗрммрм╛ рмЕрмирнБрмнрмм рмХрм░рмирнНрмдрнБ рмПрммрмВ рмкрммрм┐рмдрнНрм░ рм░рнАрмдрм┐рмирнАрмдрм┐рм░рнЗ рмЕрмВрм╢рмЧрнНрм░рм╣рмг рмХрм░рмирнНрмдрнБ рмпрм╛рм╣рм╛ рмЖрмкрмгрмЩрнНрмХ рмЖрмзрнНрнЯрм╛рмдрнНрморм┐рмХ рммрнГрмжрнНрмзрм┐рмХрнБ рмкрнЛрм╖рмг рмХрм░рнЗ",
      specialSevaTitle: "рммрм┐рм╢рнЗрм╖ рм╕рнЗрммрм╛ рмПрммрмВ рмкрнВрмЬрм╛",
      specialSevaSubtitle: "рммрм┐рм╢рнЗрм╖ рмЕрммрм╕рм░ рмПрммрмВ рмжрм┐рммрнНрнЯ рмЖрм╢рнАрм░рнНрммрм╛рмж рмкрм╛рмЗрмБ рммрнНрнЯрмХрнНрмдрм┐рмЧрмд рмЖрмзрнНрнЯрм╛рмдрнНрморм┐рмХ рм╕рнЗрммрм╛ рммрнБрмХрнН рмХрм░рмирнНрмдрнБ",
      templeTimingsTitle: "рмормирнНрмжрм┐рм░ рм╕рморнЯ",
      dailySchedule: "рмжрнИрмирм┐рмХ рмХрм╛рм░рнНрмпрнНрнЯрм╕рнВрмЪрнА",
      specialTimings: "рммрм┐рм╢рнЗрм╖ рм╕рморнЯ",
      morningDarshan: "рмкрнНрм░рм╛рмдрмГ рмжрм░рнНрм╢рми",
      afternoonBreak: "рмЕрмкрм░рм╛рм╣рнНрми рммрм┐рм░рмдрм┐",
      eveningDarshan: "рм╕рмирнНрмзрнНрнЯрм╛ рмжрм░рнНрм╢рми",
      festivalDays: "рмкрм░рнНрмм рмжрм┐рми",
      mangalAarti: "рмормЩрнНрмЧрм│ рмЖрм░рмдрм┐",
      sandhyaAarti: "рм╕рмирнНрмзрнНрнЯрм╛ рмЖрм░рмдрм┐",
      extendedHours: "рммрм┐рм╕рнНрмдрм╛рм░рм┐рмд рмШрмгрнНрмЯрм╛",
      contactInfo: "рмЕрмзрм┐рмХ рм╕рнВрмЪрмирм╛ рмкрм╛рмЗрмБ рмпрнЛрмЧрм╛рмпрнЛрмЧ рмХрм░рмирнНрмдрнБ",
      bookNow: "рммрм░рнНрмдрнНрмдрморм╛рми рммрнБрмХрнН рмХрм░рмирнНрмдрнБ",
      price: "рморнВрм▓рнНрнЯ:",
      duration: "рмЕрммрмзрм┐:",
      advanceBooking: "рмЕрмЧрнНрм░рнАрмо рммрнБрмХрм┐рмВ рмЖрммрм╢рнНрнЯрмХ",
      free: "рморм╛рмЧрмгрм╛",
      donationBased: "рмжрм╛рми рмЖрмзрм╛рм░рм┐рмд",
      byAppointment: "рмирм┐рмпрнБрмХрнНрмдрм┐ рмжрнНрн▒рм╛рм░рм╛",
      weekends: "рм╕рмкрнНрмдрм╛рм╣рм╛рмирнНрмд"
    }
  };

  const services = [
    {
      icon: 'ЁЯзШтАНтЩАя╕П',
      title: {
        en: 'Meditation & Yoga',
        hi: 'рдзреНрдпрд╛рди рдФрд░ рдпреЛрдЧ',
        or: 'рмзрнНрнЯрм╛рми рмПрммрмВ рмпрнЛрмЧ'
      },
      description: {
        en: 'Daily meditation and yoga sessions for spiritual wellness',
        hi: 'рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдХрд▓реНрдпрд╛рдг рдХреЗ рд▓рд┐рдП рджреИрдирд┐рдХ рдзреНрдпрд╛рди рдФрд░ рдпреЛрдЧ рд╕рддреНрд░',
        or: 'рмЖрмзрнНрнЯрм╛рмдрнНрморм┐рмХ рм╕рнБрм╕рнНрмермдрм╛ рмкрм╛рмЗрмБ рмжрнИрмирм┐рмХ рмзрнНрнЯрм╛рми рмПрммрмВ рмпрнЛрмЧ рмЕрмзрм┐рммрнЗрм╢рми'
      },
      features: {
        en: ['Morning Sessions', 'Expert Guidance', 'All Levels Welcome'],
        hi: ['рдкреНрд░рд╛рддрдГрдХрд╛рд▓реАрди рд╕рддреНрд░', 'рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдорд╛рд░реНрдЧрджрд░реНрд╢рди', 'рд╕рднреА рд╕реНрддрд░реЛрдВ рдХрд╛ рд╕реНрд╡рд╛рдЧрдд'],
        or: ['рмкрнНрм░рм╛рмдрмГрмХрм╛рм│рнАрми рмЕрмзрм┐рммрнЗрм╢рми', 'рммрм┐рм╢рнЗрм╖рмЬрнНрмЮ рморм╛рм░рнНрмЧрмжрм░рнНрм╢рми', 'рм╕рморм╕рнНрмд рм╕рнНрмдрм░рм░ рм╕рнНрн▒рм╛рмЧрмд']
      },
      timing: '6:00 AM - 7:00 AM',
      price: content[language].free
    },
    {
      icon: 'ЁЯУ┐',
      title: {
        en: 'Prayer Services',
        hi: 'рдкреНрд░рд╛рд░реНрдердирд╛ рд╕реЗрд╡рд╛рдПрдВ',
        or: 'рмкрнНрм░рм╛рм░рнНрмермирм╛ рм╕рнЗрммрм╛'
      },
      description: {
        en: 'Traditional prayer ceremonies and aarti',
        hi: 'рдкрд╛рд░рдВрдкрд░рд┐рдХ рдкреНрд░рд╛рд░реНрдердирд╛ рд╕рдорд╛рд░реЛрд╣ рдФрд░ рдЖрд░рддреА',
        or: 'рмкрм╛рм░рморнНрмкрм░рм┐рмХ рмкрнНрм░рм╛рм░рнНрмермирм╛ рм╕рморм╛рм░рнЛрм╣ рмПрммрмВ рмЖрм░рмдрм┐'
      },
      features: {
        en: ['Morning Aarti', 'Evening Aarti', 'Special Prayers'],
        hi: ['рдкреНрд░рд╛рддрдГ рдЖрд░рддреА', 'рд╕рдВрдзреНрдпрд╛ рдЖрд░рддреА', 'рд╡рд┐рд╢реЗрд╖ рдкреНрд░рд╛рд░реНрдердирд╛рдПрдВ'],
        or: ['рмкрнНрм░рм╛рмдрмГ рмЖрм░рмдрм┐', 'рм╕рмирнНрмзрнНрнЯрм╛ рмЖрм░рмдрм┐', 'рммрм┐рм╢рнЗрм╖ рмкрнНрм░рм╛рм░рнНрмермирм╛']
      },
      timing: '6:00 AM & 7:00 PM',
      price: content[language].free
    },
    {
      icon: 'ЁЯХЙя╕П',
      title: {
        en: 'Spiritual Counseling',
        hi: 'рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдкрд░рд╛рдорд░реНрд╢',
        or: 'рмЖрмзрнНрнЯрм╛рмдрнНрморм┐рмХ рмкрм░рм╛рморм░рнНрм╢'
      },
      description: {
        en: 'Personal guidance for your spiritual journey',
        hi: 'рдЖрдкрдХреА рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдпрд╛рддреНрд░рд╛ рдХреЗ рд▓рд┐рдП рд╡реНрдпрдХреНрддрд┐рдЧрдд рдорд╛рд░реНрдЧрджрд░реНрд╢рди',
        or: 'рмЖрмкрмгрмЩрнНрмХ рмЖрмзрнНрнЯрм╛рмдрнНрморм┐рмХ рмпрм╛рмдрнНрм░рм╛ рмкрм╛рмЗрмБ рммрнНрнЯрмХрнНрмдрм┐рмЧрмд рморм╛рм░рнНрмЧрмжрм░рнНрм╢рми'
      },
      features: {
        en: ['One-on-One Sessions', 'Life Guidance', 'Spiritual Healing'],
        hi: ['рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рддреНрд░', 'рдЬреАрд╡рди рдорд╛рд░реНрдЧрджрд░реНрд╢рди', 'рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдЪрд┐рдХрд┐рддреНрд╕рд╛'],
        or: ['рммрнНрнЯрмХрнНрмдрм┐рмЧрмд рмЕрмзрм┐рммрнЗрм╢рми', 'рмЬрнАрммрми рморм╛рм░рнНрмЧрмжрм░рнНрм╢рми', 'рмЖрмзрнНрнЯрм╛рмдрнНрморм┐рмХ рмЪрм┐рмХрм┐рмдрнНрм╕рм╛']
      },
      timing: content[language].byAppointment,
      price: content[language].donationBased
    },
    {
      icon: 'ЁЯПЫя╕П',
      title: {
        en: 'Temple Tours',
        hi: 'рдордВрджрд┐рд░ рднреНрд░рдордг',
        or: 'рмормирнНрмжрм┐рм░ рмнрнНрм░рмормг'
      },
      description: {
        en: 'Guided tours of our sacred temple complex',
        hi: 'рд╣рдорд╛рд░реЗ рдкрд╡рд┐рддреНрд░ рдордВрджрд┐рд░ рдкрд░рд┐рд╕рд░ рдХреЗ рдирд┐рд░реНрджреЗрд╢рд┐рдд рднреНрд░рдордг',
        or: 'рмЖрморм░ рмкрммрм┐рмдрнНрм░ рмормирнНрмжрм┐рм░ рмХрморнНрмкрнНрм▓рнЗрмХрнНрм╕рм░ рмЧрм╛рмЗрмбрнН рмЯрнБрм░рнН'
      },
      features: {
        en: ['Historical Insights', 'Architectural Details', 'Cultural Learning'],
        hi: ['рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐', 'рд╕реНрдерд╛рдкрддреНрдп рд╡рд┐рд╡рд░рдг', 'рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рд╢рд┐рдХреНрд╖рд╛'],
        or: ['рмРрмдрм┐рм╣рм╛рм╕рм┐рмХ рмЕрмирнНрмдрм░рнНрмжрнГрм╖рнНрмЯрм┐', 'рм╕рнНрмерм╛рмкрмдрнНрнЯ рммрм┐рммрм░рмгрнА', 'рм╕рм╛рмВрм╕рнНрмХрнГрмдрм┐рмХ рм╢рм┐рмХрнНрм╖рм╛']
      },
      timing: '9:00 AM - 5:00 PM',
      price: content[language].free
    },
    {
      icon: 'ЁЯОн',
      title: {
        en: 'Cultural Programs',
        hi: 'рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдХрд╛рд░реНрдпрдХреНрд░рдо',
        or: 'рм╕рм╛рмВрм╕рнНрмХрнГрмдрм┐рмХ рмХрм╛рм░рнНрмпрнНрнЯрмХрнНрм░рмо'
      },
      description: {
        en: 'Traditional music, dance, and cultural events',
        hi: 'рдкрд╛рд░рдВрдкрд░рд┐рдХ рд╕рдВрдЧреАрдд, рдиреГрддреНрдп рдФрд░ рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдХрд╛рд░реНрдпрдХреНрд░рдо',
        or: 'рмкрм╛рм░рморнНрмкрм░рм┐рмХ рм╕рмЩрнНрмЧрнАрмд, рмирнГрмдрнНрнЯ рмПрммрмВ рм╕рм╛рмВрм╕рнНрмХрнГрмдрм┐рмХ рмХрм╛рм░рнНрмпрнНрнЯрмХрнНрм░рмо'
      },
      features: {
        en: ['Classical Music', 'Traditional Dance', 'Spiritual Discourses'],
        hi: ['рд╢рд╛рд╕реНрддреНрд░реАрдп рд╕рдВрдЧреАрдд', 'рдкрд╛рд░рдВрдкрд░рд┐рдХ рдиреГрддреНрдп', 'рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдкреНрд░рд╡рдЪрди'],
        or: ['рм╢рм╛рм╕рнНрмдрнНрм░рнАрнЯ рм╕рмЩрнНрмЧрнАрмд', 'рмкрм╛рм░рморнНрмкрм░рм┐рмХ рмирнГрмдрнНрнЯ', 'рмЖрмзрнНрнЯрм╛рмдрнНрморм┐рмХ рмкрнНрм░рммрмЪрми']
      },
      timing: content[language].weekends,
      price: content[language].free
    },
    {
      icon: 'ЁЯН╜я╕П',
      title: {
        en: 'Annadaan Seva',
        hi: 'рдЕрдиреНрдирджрд╛рди рд╕реЗрд╡рд╛',
        or: 'рмЕрмирнНрмирмжрм╛рми рм╕рнЗрммрм╛'
      },
      description: {
        en: 'Free meals for devotees and the needy',
        hi: 'рднрдХреНрддреЛрдВ рдФрд░ рдЬрд░реВрд░рддрдордВрджреЛрдВ рдХреЗ рд▓рд┐рдП рдореБрдлреНрдд рднреЛрдЬрди',
        or: 'рмнрмХрнНрмд рмПрммрмВ рмЕрмнрм╛рммрнАрмЩрнНрмХ рмкрм╛рмЗрмБ рморм╛рмЧрмгрм╛ рмнрнЛрмЬрми'
      },
      features: {
        en: ['Daily Meals', 'Festival Feasts', 'Community Service'],
        hi: ['рджреИрдирд┐рдХ рднреЛрдЬрди', 'рддреНрдпреЛрд╣рд╛рд░реА рднреЛрдЬ', 'рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рд╕реЗрд╡рд╛'],
        or: ['рмжрнИрмирм┐рмХ рмнрнЛрмЬрми', 'рмкрм░рнНрмм рмнрнЛрмЬрм┐', 'рм╕рморнНрмкрнНрм░рмжрм╛рнЯ рм╕рнЗрммрм╛']
      },
      timing: '12:00 PM - 2:00 PM',
      price: content[language].free
    }
  ]

  const specialServices = [
    {
      name: {
        en: 'Abhishek Seva',
        hi: 'рдЕрднрд┐рд╖реЗрдХ рд╕реЗрд╡рд╛',
        or: 'рмЕрмнрм┐рм╖рнЗрмХ рм╕рнЗрммрм╛'
      },
      description: {
        en: 'Sacred bathing ceremony of the deity',
        hi: 'рджреЗрд╡рддрд╛ рдХрд╛ рдкрд╡рд┐рддреНрд░ рд╕реНрдирд╛рди рд╕рдорд╛рд░реЛрд╣',
        or: 'рмжрнЗрммрмдрм╛рмЩрнНрмХрм░ рмкрммрм┐рмдрнНрм░ рм╕рнНрмирм╛рми рм╕рморм╛рм░рнЛрм╣'
      },
      price: 'тВ╣501',
      duration: '30 minutes',
      booking: content[language].advanceBooking
    },
    {
      name: {
        en: 'Rudrabhishek',
        hi: 'рд░реБрджреНрд░рд╛рднрд┐рд╖реЗрдХ',
        or: 'рм░рнБрмжрнНрм░рм╛рмнрм┐рм╖рнЗрмХ'
      },
      description: {
        en: 'Special prayers to Lord Shiva with Vedic mantras',
        hi: 'рд╡реИрджрд┐рдХ рдордВрддреНрд░реЛрдВ рдХреЗ рд╕рд╛рде рднрдЧрд╡рд╛рди рд╢рд┐рд╡ рдХреА рд╡рд┐рд╢реЗрд╖ рдкреНрд░рд╛рд░реНрдердирд╛',
        or: 'рммрнЗрмжрм┐рмХ рмормирнНрмдрнНрм░ рм╕рм╣рм┐рмд рмнрмЧрммрм╛рми рм╢рм┐рммрмЩрнНрмХ рммрм┐рм╢рнЗрм╖ рмкрнНрм░рм╛рм░рнНрмермирм╛'
      },
      price: 'тВ╣1001',
      duration: '45 minutes',
      booking: content[language].advanceBooking
    },
    {
      name: {
        en: 'Mahamrityunjaya Jaap',
        hi: 'рдорд╣рд╛рдореГрддреНрдпреБрдВрдЬрдп рдЬрд╛рдк',
        or: 'рморм╣рм╛рморнГрмдрнНрнЯрнБрмЮрнНрмЬрнЯ рмЬрм╛рмк'
      },
      description: {
        en: 'Powerful healing mantra chanting for health and prosperity',
        hi: 'рд╕реНрд╡рд╛рд╕реНрдереНрдп рдФрд░ рд╕рдореГрджреНрдзрд┐ рдХреЗ рд▓рд┐рдП рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рдЙрдкрдЪрд╛рд░ рдордВрддреНрд░ рдЬрд╛рдк',
        or: 'рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рмПрммрмВ рм╕рморнГрмжрнНрмзрм┐ рмкрм╛рмЗрмБ рм╢рмХрнНрмдрм┐рм╢рм╛рм│рнА рмЙрмкрмЪрм╛рм░ рмормирнНрмдрнНрм░ рмЬрм╛рмк'
      },
      price: 'тВ╣2100',
      duration: '1 hour',
      booking: content[language].advanceBooking
    },
    {
      name: {
        en: 'Annakut Seva',
        hi: 'рдЕрдиреНрдирдХреВрдЯ рд╕реЗрд╡рд╛',
        or: 'рмЕрмирнНрмирмХрнВрмЯ рм╕рнЗрммрм╛'
      },
      description: {
        en: 'Grand food offering to the deity with elaborate arrangements',
        hi: 'рд╡рд┐рд╕реНрддреГрдд рд╡реНрдпрд╡рд╕реНрдерд╛ рдХреЗ рд╕рд╛рде рджреЗрд╡рддрд╛ рдХреЛ рднрд╡реНрдп рднреЛрдЬрди рдЕрд░реНрдкрдг',
        or: 'рммрм┐рм╕рнНрмдрнГрмд рммрнНрнЯрммрм╕рнНрмерм╛ рм╕рм╣рм┐рмд рмжрнЗрммрмдрм╛рмЩрнНрмХрнБ рмнрммрнНрнЯ рмнрнЛрмЬрми рмЕрм░рнНрмкрмг'
      },
      price: 'тВ╣5100',
      duration: '2 hours',
      booking: content[language].advanceBooking
    }
  ]

  return (
    <section id="services" className="py-20 bg-gradient-to-b from-gray-50 to-white">
      <div className="container mx-auto px-6">
        <motion.div
          ref={ref}
          initial={{ opacity: 0, y: 50 }}
          animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
          transition={{ duration: 0.6 }}
          className="text-center mb-16"
        >
          <h2 className="text-5xl font-bold mb-6 bg-gradient-to-r from-orange-600 to-orange-500 bg-clip-text text-transparent">
            {content[language].title}
          </h2>
          <motion.div 
            initial={{ width: 0 }}
            animate={isInView ? { width: 96 } : { width: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="h-1 bg-gradient-to-r from-orange-600 to-orange-500 mx-auto mb-8"
          ></motion.div>
          <p className="text-xl text-gray-800 max-w-3xl mx-auto leading-relaxed font-medium">
            {content[language].subtitle}
          </p>
        </motion.div>

        {/* Regular Services */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-20">
          {services.map((service, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 50 }}
              animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
              transition={{ duration: 0.5, delay: index * 0.05 }}
              whileHover={{ 
                y: -8,
                boxShadow: "0 25px 50px -12px rgba(0, 0, 0, 0.25)"
              }}
              className="group bg-white rounded-2xl p-8 shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 border border-orange-100"
            >
              <div className="text-center mb-6">
                <motion.div 
                  className="text-6xl mb-4"
                  whileHover={{ 
                    scale: 1.2,
                    rotate: [0, -10, 10, -10, 0],
                    transition: { duration: 0.5 }
                  }}
                >
                  {service.icon}
                </motion.div>
                <h3 className="text-2xl font-bold text-gray-900 mb-3">{service.title[language]}</h3>
                <p className="text-gray-700 leading-relaxed mb-4 font-medium">{service.description[language]}</p>
              </div>
              
              <div className="space-y-3 mb-6">
                {service.features[language].map((feature, featureIndex) => (
                  <motion.div 
                    key={featureIndex} 
                    className="flex items-center"
                    initial={{ opacity: 0, x: -20 }}
                    animate={isInView ? { opacity: 1, x: 0 } : { opacity: 0, x: -20 }}
                    transition={{ duration: 0.3, delay: (index * 0.05) + (featureIndex * 0.05) }}
                  >
                    <motion.div 
                      className="w-2 h-2 bg-gradient-to-r from-orange-500 to-orange-400 rounded-full mr-3"
                      animate={{ scale: [1, 1.2, 1] }}
                      transition={{ duration: 2, repeat: Infinity }}
                    ></motion.div>
                    <span className="text-gray-800 text-sm font-medium">{feature}</span>
                  </motion.div>
                ))}
              </div>
              
              <motion.div 
                className="border-t border-gray-200 pt-4 space-y-2"
                initial={{ opacity: 0 }}
                animate={isInView ? { opacity: 1 } : { opacity: 0 }}
                transition={{ duration: 0.3, delay: (index * 0.05) + 0.15 }}
              >
                <div className="flex items-center justify-between text-sm">
                  <div className="flex items-center text-gray-700">
                    <Clock className="w-4 h-4 mr-1 text-orange-500" />
                    <span className="font-medium">{service.timing}</span>
                  </div>
                  <span className="font-bold text-orange-500">{service.price}</span>
                </div>
              </motion.div>
            </motion.div>
          ))}
        </div>

        {/* Special Seva Section */}
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
          transition={{ duration: 0.6, delay: 0.3 }}
          className="bg-gradient-to-r from-orange-500 to-orange-400 rounded-3xl p-8 md:p-12 text-white mb-16"
        >
          <motion.div 
            className="text-center mb-12"
            initial={{ opacity: 0, y: 30 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 30 }}
            transition={{ duration: 0.5, delay: 0.4 }}
          >
            <motion.h3 
              className="text-4xl font-bold mb-4"
              initial={{ scale: 0.8 }}
              animate={isInView ? { scale: 1 } : { scale: 0.8 }}
              transition={{ duration: 0.4, delay: 0.5 }}
            >
              {content[language].specialSevaTitle}
            </motion.h3>
            <motion.p 
              className="text-xl opacity-95 max-w-2xl mx-auto font-medium"
              initial={{ opacity: 0 }}
              animate={isInView ? { opacity: 0.95 } : { opacity: 0 }}
              transition={{ duration: 0.5, delay: 0.6 }}
            >
              {content[language].specialSevaSubtitle}
            </motion.p>
          </motion.div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {specialServices.map((service, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 30 }}
                animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 30 }}
                transition={{ duration: 0.4, delay: 0.7 + (index * 0.05) }}
                whileHover={{ 
                  scale: 1.05,
                  y: -5,
                  transition: { duration: 0.2 }
                }}
                className="bg-white/15 backdrop-blur-sm rounded-xl p-6 hover:bg-white/25 transition-all duration-300 border border-white/10"
              >
                <motion.div 
                  className="mb-4"
                  initial={{ opacity: 0 }}
                  animate={isInView ? { opacity: 1 } : { opacity: 0 }}
                  transition={{ duration: 0.3, delay: 0.8 + (index * 0.05) }}
                >
                  <h4 className="font-bold text-xl mb-2">{service.name[language]}</h4>
                  <p className="text-sm opacity-95 leading-relaxed font-medium">{service.description[language]}</p>
                </motion.div>
                
                <motion.div 
                  className="space-y-2 text-sm"
                  initial={{ opacity: 0 }}
                  animate={isInView ? { opacity: 1 } : { opacity: 0 }}
                  transition={{ duration: 0.3, delay: 0.9 + (index * 0.05) }}
                >
                  <div className="flex justify-between items-center">
                    <span className="font-medium">{content[language].price}</span>
                    <span className="font-bold text-lg">{service.price}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="font-medium">{content[language].duration}</span>
                    <span className="font-medium">{service.duration}</span>
                  </div>
                  <div className="text-xs opacity-90 mt-3 font-medium">
                    {service.booking}
                  </div>
                </motion.div>
                
                <motion.button 
                  className="w-full mt-4 bg-white text-orange-500 px-4 py-2 rounded-lg font-bold hover:bg-gray-100 transition-all duration-300"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => {
                    const contactSection = document.getElementById('contact');
                    if (contactSection) {
                      contactSection.scrollIntoView({ behavior: 'smooth' });
                    }
                  }}
                  initial={{ opacity: 0, y: 10 }}
                  animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 10 }}
                  transition={{ duration: 0.3, delay: 1 + (index * 0.05) }}
                >
                  {content[language].bookNow}
                </motion.button>
              </motion.div>
            ))}
          </div>
        </motion.div>

        {/* Service Hours */}
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
          transition={{ duration: 0.6, delay: 0.6 }}
          className="bg-white rounded-2xl p-8 shadow-xl max-w-4xl mx-auto"
        >
          <motion.h3 
            className="text-3xl font-bold text-center text-gray-900 mb-8"
            initial={{ scale: 0.8, opacity: 0 }}
            animate={isInView ? { scale: 1, opacity: 1 } : { scale: 0.8, opacity: 0 }}
            transition={{ duration: 0.4, delay: 0.7 }}
          >
            {content[language].templeTimingsTitle}
          </motion.h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <motion.div 
              className="space-y-4"
              initial={{ opacity: 0, x: -30 }}
              animate={isInView ? { opacity: 1, x: 0 } : { opacity: 0, x: -30 }}
              transition={{ duration: 0.4, delay: 0.8 }}
            >
              <motion.h4 
                className="text-xl font-bold text-gray-900 mb-4"
                initial={{ opacity: 0 }}
                animate={isInView ? { opacity: 1 } : { opacity: 0 }}
                transition={{ duration: 0.3, delay: 0.9 }}
              >
                {content[language].dailySchedule}
              </motion.h4>
              <div className="space-y-3">
                <motion.div 
                  className="flex justify-between items-center py-2 border-b border-gray-200"
                  initial={{ opacity: 0, y: 10 }}
                  animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 10 }}
                  transition={{ duration: 0.3, delay: 1 }}
                >
                  <span className="font-bold text-gray-800">{content[language].morningDarshan}</span>
                  <span className="text-orange-500 font-bold">5:00 AM - 12:00 PM</span>
                </motion.div>
                <motion.div 
                  className="flex justify-between items-center py-2 border-b border-gray-200"
                  initial={{ opacity: 0, y: 10 }}
                  animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 10 }}
                  transition={{ duration: 0.3, delay: 1.05 }}
                >
                  <span className="font-bold text-gray-800">{content[language].afternoonBreak}</span>
                  <span className="text-gray-600 font-bold">12:00 PM - 4:00 PM</span>
                </motion.div>
                <motion.div 
                  className="flex justify-between items-center py-2 border-b border-gray-200"
                  initial={{ opacity: 0, y: 10 }}
                  animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 10 }}
                  transition={{ duration: 0.3, delay: 1.1 }}
                >
                  <span className="font-bold text-gray-800">{content[language].eveningDarshan}</span>
                  <span className="text-orange-500 font-bold">4:00 PM - 9:00 PM</span>
                </motion.div>
              </div>
            </motion.div>
            
            <motion.div 
              className="space-y-4"
              initial={{ opacity: 0, x: 30 }}
              animate={isInView ? { opacity: 1, x: 0 } : { opacity: 0, x: 30 }}
              transition={{ duration: 0.4, delay: 0.9 }}
            >
              <motion.h4 
                className="text-xl font-bold text-gray-900 mb-4"
                initial={{ opacity: 0 }}
                animate={isInView ? { opacity: 1 } : { opacity: 0 }}
                transition={{ duration: 0.3, delay: 1 }}
              >
                {content[language].specialTimings}
              </motion.h4>
              <div className="space-y-3">
                <motion.div 
                  className="flex justify-between items-center py-2 border-b border-gray-200"
                  initial={{ opacity: 0, y: 10 }}
                  animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 10 }}
                  transition={{ duration: 0.3, delay: 1.1 }}
                >
                  <span className="font-bold text-gray-800">{content[language].festivalDays}</span>
                  <span className="text-orange-500 font-bold">{content[language].extendedHours}</span>
                </motion.div>
                <motion.div 
                  className="flex justify-between items-center py-2 border-b border-gray-200"
                  initial={{ opacity: 0, y: 10 }}
                  animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 10 }}
                  transition={{ duration: 0.3, delay: 1.15 }}
                >
                  <span className="font-bold text-gray-800">{content[language].mangalAarti}</span>
                  <span className="text-orange-500 font-bold">6:00 AM</span>
                </motion.div>
                <motion.div 
                  className="flex justify-between items-center py-2 border-b border-gray-200"
                  initial={{ opacity: 0, y: 10 }}
                  animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 10 }}
                  transition={{ duration: 0.3, delay: 1.2 }}
                >
                  <span className="font-bold text-gray-800">{content[language].sandhyaAarti}</span>
                  <span className="text-orange-500 font-bold">7:00 PM</span>
                </motion.div>
              </div>
            </motion.div>
          </div>
          
          <motion.div 
            className="mt-8 text-center"
            initial={{ opacity: 0, y: 20 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
            transition={{ duration: 0.4, delay: 1.3 }}
          >
            <motion.button 
              className="bg-gradient-to-r from-orange-500 to-orange-400 text-white px-8 py-3 rounded-full font-bold hover:shadow-lg transition-all duration-300"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => {
                const contactSection = document.getElementById('contact');
                if (contactSection) {
                  contactSection.scrollIntoView({ behavior: 'smooth' });
                }
              }}
            >
              {content[language].contactInfo}
            </motion.button>
          </motion.div>
        </motion.div>
      </div>
    </section>
  )
}